(function() {var implementors = {};
implementors["identity_core"] = [{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for OneOrManyIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for OneOrMany&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecretKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyPair","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JcsEd25519Signature2020","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dereference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DocumentMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resolution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolutionMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaDocument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimaryResource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondaryResource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DerefContext","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Credential&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CredentialBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;, U&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !RefUnwindSafe for Presentation&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;, U&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !RefUnwindSafe for PresentationBuilder&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialSchema","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialSubject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Evidence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IssuerData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefreshService","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TermsOfUse","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !RefUnwindSafe for VerifiableCredential&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;, U&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !RefUnwindSafe for VerifiablePresentation&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Issuer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BASE_CONTEXT","synthetic":true,"types":[]}];
implementors["identity_derive"] = [{"text":"impl RefUnwindSafe for InputEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputModel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataFields","synthetic":true,"types":[]}];
implementors["identity_diff"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U, V&gt; RefUnwindSafe for DiffDocument&lt;T, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: for&lt;'de&gt; Deserialize&lt;'de&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: for&lt;'de&gt; Deserialize&lt;'de&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Diff&gt;::Type: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DiffMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DiffService&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DiffMethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffMethodData","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for DiffHashMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for InnerValue&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DiffHashSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InnerValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffi8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffi16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffi32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffi64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffi128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffiSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffu8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffu16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffu32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffu64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffu128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffuSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffF32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffF64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffbool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffchar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diffunit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DiffOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffValue","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DiffVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InnerVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diff&gt;::Type: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["identity_iota"] = [{"text":"impl !RefUnwindSafe for AuthChain","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DiffChain","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DocumentChain","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TxnPrinter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Network","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __Full","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __Mini","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __Hash","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EXPLORER_MAIN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EXPLORER_DEV","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EXPLORER_COM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NODE_MAIN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NODE_DEV","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NODE_COM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IotaDID","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Segments&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IotaDocument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IotaDocumentBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DocumentDiff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MessageIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !RefUnwindSafe for CredentialValidation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;, U&nbsp;=&nbsp;BTreeMap&lt;String, Value&gt;&gt; !RefUnwindSafe for PresentationValidation&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DocumentValidation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CredentialValidator&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()