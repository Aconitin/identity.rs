(function() {var implementors = {};
implementors["identity_core"] = [{"text":"impl From&lt;Url&gt; for Context","synthetic":false,"types":[]},{"text":"impl From&lt;BTreeMap&lt;String, Value&gt;&gt; for Context","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for OneOrMany&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Vec&lt;T&gt;&gt; for OneOrMany&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;OneOrMany&lt;T&gt;&gt; for Vec&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Timestamp&gt; for String","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8&gt;&gt; for PublicKey","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8&gt;&gt; for SecretKey","synthetic":false,"types":[]},{"text":"impl From&lt;FromHexError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;DecodeError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;ParseError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;ParseError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;PrimaryResource&gt; for Resource","synthetic":false,"types":[]},{"text":"impl From&lt;SecondaryResource&gt; for Resource","synthetic":false,"types":[]},{"text":"impl From&lt;Document&lt;BTreeMap&lt;String, Value&gt;, BTreeMap&lt;String, Value&gt;, BTreeMap&lt;String, Value&gt;&gt;&gt; for PrimaryResource","synthetic":false,"types":[]},{"text":"impl From&lt;Url&gt; for PrimaryResource","synthetic":false,"types":[]},{"text":"impl From&lt;DID&gt; for SecondaryResource","synthetic":false,"types":[]},{"text":"impl From&lt;Method&lt;BTreeMap&lt;String, Value&gt;&gt;&gt; for SecondaryResource","synthetic":false,"types":[]},{"text":"impl From&lt;MethodRef&lt;BTreeMap&lt;String, Value&gt;&gt;&gt; for SecondaryResource","synthetic":false,"types":[]},{"text":"impl From&lt;DIDKey&lt;Method&lt;BTreeMap&lt;String, Value&gt;&gt;&gt;&gt; for SecondaryResource","synthetic":false,"types":[]},{"text":"impl From&lt;DIDKey&lt;MethodRef&lt;BTreeMap&lt;String, Value&gt;&gt;&gt;&gt; for SecondaryResource","synthetic":false,"types":[]},{"text":"impl From&lt;DIDKey&lt;Service&lt;BTreeMap&lt;String, Value&gt;&gt;&gt;&gt; for SecondaryResource","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Issuer <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Url&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["identity_diff"] = [{"text":"impl&lt;T&gt; From&lt;Option&lt;T&gt;&gt; for DiffOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Diff,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["identity_iota"] = [{"text":"impl From&lt;Network&gt; for Network","synthetic":false,"types":[]},{"text":"impl From&lt;Network&gt; for Network","synthetic":false,"types":[]},{"text":"impl From&lt;IotaDID&gt; for DID","synthetic":false,"types":[]},{"text":"impl From&lt;VerifiableDocument&lt;Properties, BTreeMap&lt;String, Value&gt;, BTreeMap&lt;String, Value&gt;&gt;&gt; for IotaDocument","synthetic":false,"types":[]},{"text":"impl From&lt;IotaDocument&gt; for VerifiableDocument&lt;Properties&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for MessageId","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()